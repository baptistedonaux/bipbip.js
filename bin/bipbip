#!/usr/bin/env node

"use strict";

let Bipbip = require('../lib/index.js'),
    commander = require("commander"),
    fs = require("fs"),
    writter = new (require("../lib/logger.js"))({
        data: (chunk) => {
            console.log(chunk);
        },
        error: (error) => {
            message(writter.getWritter(), error);
        }
    }),
    message = require("../lib/logger.js").buildMessage,
	pkg,
	envValue;

try {
	pkg = require('../package.json');
} catch (err) {
	message(writter.write, [{
        "message": err.message,
        "color": "red"
    }]);
	process.exit(1);
}

commander
	.version(pkg.version)
	.description("Bipbip deploy for you")
	.usage('[options] <env>')
	.option('-f, --file <absolute/path/to/config.file.js>', 'Profile file', process.cwd() + "/deploy.js")
	.on('--help', function() {
	    console.log('  Examples:');
	    console.log('');
	    console.log('    $ bipbip dev');
	    console.log('    $ bipbip -f deploy.js dev');
	    console.log('');
	})
	.action(function (env) {
		envValue = env;
	})
	.parse(process.argv);

if (fs.existsSync(commander.file) === false) {
	message(writter.write, [{
        "message": commander.file + ' not found',
        "color": "red"
    }]);
	process.exit(1);
} else if (envValue === undefined) {
	message(writter.write, [{
        "message": 'Please set one environment to use',
        "color": "red"
    }]);
	process.exit(1);
}

Bipbip(commander.file, envValue, writter);
